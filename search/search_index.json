{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Loudflow \u00b6 A multi-agent framework... Features \u00b6 Python 3 EventSourcing","title":"Welcome"},{"location":"#loudflow","text":"A multi-agent framework...","title":"Loudflow"},{"location":"#features","text":"Python 3 EventSourcing","title":"Features"},{"location":"loudflow/main-reference/","text":"Module: main \u00b6 Function: main \u00b6 Source code in loudflow/main.py def main () -> None : realm = Realm () realm . run ()","title":"main"},{"location":"loudflow/main-reference/#module-main","text":"","title":"Module: main"},{"location":"loudflow/main-reference/#function-main","text":"Source code in loudflow/main.py def main () -> None : realm = Realm () realm . run ()","title":"Function: main"},{"location":"loudflow/common/decorators-reference/","text":"Module: decorators \u00b6 Function: tracer \u00b6 Decorator for tracing entry to and exit from a function. Parameters: Name Type Description Default log_entry bool Log entry to function if True. Default is True. True log_exit bool Log exit from function if True. Default is True. True level str Log level. Default is TRACE. 'TRACE' Returns: Type Description Any Wrapper function for decorator. Source code in loudflow/common/decorators.py def trace ( * , log_entry : bool = True , log_exit : bool = True , level : str = \"TRACE\" ) -> Any : \"\"\"Decorator for tracing entry to and exit from a function. Args: log_entry: Log entry to function if True. Default is True. log_exit: Log exit from function if True. Default is True. level: Log level. Default is TRACE. Returns: Wrapper function for decorator. \"\"\" def wrapper ( func : Callable ) -> Any : @functools . wraps ( func ) def wrapped ( * args : Any , ** kwargs : Any ) -> Any : logger_ = logger . opt ( depth = 1 ) name = func . __name__ args_repr = [ repr ( a ) for a in args ] kwargs_repr = [ f \" { k } = { v !r} \" for k , v in kwargs . items ()] if log_entry : logger_ . log ( level , \"Entering [ {} (args= {} , kwargs= {} )].\" , name , args_repr , kwargs_repr ) result = func ( * args , ** kwargs ) if log_exit : logger_ . log ( level , \"Exiting [ {} ] with result [ {} ].\" , name , repr ( result )) return result return wrapped return wrapper Function: timer \u00b6 Decorator for timing the execution of a function. Parameters: Name Type Description Default level str Log level. Default is TRACE. 'TRACE' Returns: Type Description Any Wrapper function for decorator. Source code in loudflow/common/decorators.py def timer ( * , level : str = \"TRACE\" ) -> Any : \"\"\"Decorator for timing the execution of a function. Args: level: Log level. Default is TRACE. Returns: Wrapper function for decorator. \"\"\" def wrapper ( func : Callable ) -> Any : @functools . wraps ( func ) def wrapped ( * args : Any , ** kwargs : Any ) -> Any : logger_ = logger . opt ( depth = 1 ) name = func . __name__ start = time . perf_counter () result = func ( * args , ** kwargs ) end = time . perf_counter () logger_ . log ( level , \"Executed [ {} ] in {:f} seconds.\" , name , end - start ) return result return wrapped return wrapper","title":"decorators"},{"location":"loudflow/common/decorators-reference/#module-decorators","text":"","title":"Module: decorators"},{"location":"loudflow/common/decorators-reference/#function-tracer","text":"Decorator for tracing entry to and exit from a function. Parameters: Name Type Description Default log_entry bool Log entry to function if True. Default is True. True log_exit bool Log exit from function if True. Default is True. True level str Log level. Default is TRACE. 'TRACE' Returns: Type Description Any Wrapper function for decorator. Source code in loudflow/common/decorators.py def trace ( * , log_entry : bool = True , log_exit : bool = True , level : str = \"TRACE\" ) -> Any : \"\"\"Decorator for tracing entry to and exit from a function. Args: log_entry: Log entry to function if True. Default is True. log_exit: Log exit from function if True. Default is True. level: Log level. Default is TRACE. Returns: Wrapper function for decorator. \"\"\" def wrapper ( func : Callable ) -> Any : @functools . wraps ( func ) def wrapped ( * args : Any , ** kwargs : Any ) -> Any : logger_ = logger . opt ( depth = 1 ) name = func . __name__ args_repr = [ repr ( a ) for a in args ] kwargs_repr = [ f \" { k } = { v !r} \" for k , v in kwargs . items ()] if log_entry : logger_ . log ( level , \"Entering [ {} (args= {} , kwargs= {} )].\" , name , args_repr , kwargs_repr ) result = func ( * args , ** kwargs ) if log_exit : logger_ . log ( level , \"Exiting [ {} ] with result [ {} ].\" , name , repr ( result )) return result return wrapped return wrapper","title":"Function: tracer"},{"location":"loudflow/common/decorators-reference/#function-timer","text":"Decorator for timing the execution of a function. Parameters: Name Type Description Default level str Log level. Default is TRACE. 'TRACE' Returns: Type Description Any Wrapper function for decorator. Source code in loudflow/common/decorators.py def timer ( * , level : str = \"TRACE\" ) -> Any : \"\"\"Decorator for timing the execution of a function. Args: level: Log level. Default is TRACE. Returns: Wrapper function for decorator. \"\"\" def wrapper ( func : Callable ) -> Any : @functools . wraps ( func ) def wrapped ( * args : Any , ** kwargs : Any ) -> Any : logger_ = logger . opt ( depth = 1 ) name = func . __name__ start = time . perf_counter () result = func ( * args , ** kwargs ) end = time . perf_counter () logger_ . log ( level , \"Executed [ {} ] in {:f} seconds.\" , name , end - start ) return result return wrapped return wrapper","title":"Function: timer"},{"location":"loudflow/common/helpers-reference/","text":"Module: helpers \u00b6 Class: FromStringEnum \u00b6 An enumeration. Function: random_adjective \u00b6 Generate random adjective. Returns: Type Description str A random adjective. Source code in loudflow/common/helpers.py def random_adjective () -> str : \"\"\"Generate random adjective. Returns: A random adjective. \"\"\" return _random_word_generator . word ( include_categories = [ \"adjectives\" ]) . lower () . capitalize ()","title":"helpers"},{"location":"loudflow/common/helpers-reference/#module-helpers","text":"","title":"Module: helpers"},{"location":"loudflow/common/helpers-reference/#class-fromstringenum","text":"An enumeration.","title":"Class: FromStringEnum"},{"location":"loudflow/common/helpers-reference/#function-random_adjective","text":"Generate random adjective. Returns: Type Description str A random adjective. Source code in loudflow/common/helpers.py def random_adjective () -> str : \"\"\"Generate random adjective. Returns: A random adjective. \"\"\" return _random_word_generator . word ( include_categories = [ \"adjectives\" ]) . lower () . capitalize ()","title":"Function: random_adjective"},{"location":"loudflow/realm/realm-reference/","text":"Module: realm \u00b6 Class: Realm \u00b6 Realm class. The realm in which the agent(s) act. __init__ ( self ) special \u00b6 Source code in loudflow/realm/realm.py @trace () def __init__ ( self ) -> None : logger . info ( \"Constructing realm...\" ) super () . __init__ () config = TileWorldConfiguration ( name = \"test\" , width = 80 , height = 50 , obstacles = 0.05 , holes = 0.001 ) self . world = TileWorld ( config ) display_config = ConsoleConfiguration ( player = self . world . agent . id ) self . display = Console ( self . world , display_config ) run ( self ) \u00b6 Source code in loudflow/realm/realm.py @trace () def run ( self ) -> None : self . world . start () self . display . show ()","title":"realm"},{"location":"loudflow/realm/realm-reference/#module-realm","text":"","title":"Module: realm"},{"location":"loudflow/realm/realm-reference/#class-realm","text":"Realm class. The realm in which the agent(s) act.","title":"Class: Realm"},{"location":"loudflow/realm/realm-reference/#loudflow.realm.realm.Realm.__init__","text":"Source code in loudflow/realm/realm.py @trace () def __init__ ( self ) -> None : logger . info ( \"Constructing realm...\" ) super () . __init__ () config = TileWorldConfiguration ( name = \"test\" , width = 80 , height = 50 , obstacles = 0.05 , holes = 0.001 ) self . world = TileWorld ( config ) display_config = ConsoleConfiguration ( player = self . world . agent . id ) self . display = Console ( self . world , display_config )","title":"__init__()"},{"location":"loudflow/realm/realm-reference/#loudflow.realm.realm.Realm.run","text":"Source code in loudflow/realm/realm.py @trace () def run ( self ) -> None : self . world . start () self . display . show ()","title":"run()"},{"location":"loudflow/realm/actions/action-reference/","text":"Module: action \u00b6 DataClass: Action \u00b6 Action class. Immutable dataclass describing actions. actor : str dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , actor ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/actions/action.py def __post_init__ ( self ) -> None : if self . actor is None : message = \"Missing required attribute [actor: str] in Action.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . actor , str ): message = \"Invalid type for attribute [actor: str] in Action.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6","title":"action"},{"location":"loudflow/realm/actions/action-reference/#module-action","text":"","title":"Module: action"},{"location":"loudflow/realm/actions/action-reference/#dataclass-action","text":"Action class. Immutable dataclass describing actions.","title":"DataClass: Action"},{"location":"loudflow/realm/actions/action-reference/#loudflow.realm.actions.action.Action.actor","text":"","title":"actor"},{"location":"loudflow/realm/actions/action-reference/#loudflow.realm.actions.action.Action.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/actions/action-reference/#loudflow.realm.actions.action.Action.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/actions/action-reference/#loudflow.realm.actions.action.Action.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/actions/action-reference/#loudflow.realm.actions.action.Action.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/actions/action-reference/#loudflow.realm.actions.action.Action.__post_init__","text":"Source code in loudflow/realm/actions/action.py def __post_init__ ( self ) -> None : if self . actor is None : message = \"Missing required attribute [actor: str] in Action.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . actor , str ): message = \"Invalid type for attribute [actor: str] in Action.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/actions/action-reference/#loudflow.realm.actions.action.Action.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/actions/action-reference/#loudflow.realm.actions.action.Action.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/actions/move-reference/","text":"Module: move \u00b6 Class: Move \u00b6 Move actions class. Immutable dataclass for move actions. dx : int dataclass-field \u00b6 dy : int dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , actor , dx , dy ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/actions/move.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . dx is None : message = \"Missing required attribute [dx: int] in Move.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . dx , int ): message = \"Invalid type for attribute [dx: int] in Move.\" logger . error ( message ) raise ValueError ( message ) if self . dy is None : message = \"Missing required attribute [dy: int] in Move.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . dy , int ): message = \"Invalid type for attribute [dy: int] in Move.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6","title":"move"},{"location":"loudflow/realm/actions/move-reference/#module-move","text":"","title":"Module: move"},{"location":"loudflow/realm/actions/move-reference/#class-move","text":"Move actions class. Immutable dataclass for move actions.","title":"Class: Move"},{"location":"loudflow/realm/actions/move-reference/#loudflow.realm.actions.move.Move.dx","text":"","title":"dx"},{"location":"loudflow/realm/actions/move-reference/#loudflow.realm.actions.move.Move.dy","text":"","title":"dy"},{"location":"loudflow/realm/actions/move-reference/#loudflow.realm.actions.move.Move.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/actions/move-reference/#loudflow.realm.actions.move.Move.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/actions/move-reference/#loudflow.realm.actions.move.Move.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/actions/move-reference/#loudflow.realm.actions.move.Move.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/actions/move-reference/#loudflow.realm.actions.move.Move.__post_init__","text":"Source code in loudflow/realm/actions/move.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . dx is None : message = \"Missing required attribute [dx: int] in Move.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . dx , int ): message = \"Invalid type for attribute [dx: int] in Move.\" logger . error ( message ) raise ValueError ( message ) if self . dy is None : message = \"Missing required attribute [dy: int] in Move.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . dy , int ): message = \"Invalid type for attribute [dy: int] in Move.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/actions/move-reference/#loudflow.realm.actions.move.Move.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/actions/move-reference/#loudflow.realm.actions.move.Move.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/changes/change-reference/","text":"Module: change \u00b6 DataClass: Change \u00b6 Base changes class. Immutable dataclass containing changes data. subject : str dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , subject ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/changes/change.py def __post_init__ ( self ) -> None : if self . subject is None : message = \"Missing required attribute [subject: str] in Change.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . subject , str ): message = \"Invalid type for attribute [subject: str] in Change.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6","title":"change"},{"location":"loudflow/realm/changes/change-reference/#module-change","text":"","title":"Module: change"},{"location":"loudflow/realm/changes/change-reference/#dataclass-change","text":"Base changes class. Immutable dataclass containing changes data.","title":"DataClass: Change"},{"location":"loudflow/realm/changes/change-reference/#loudflow.realm.changes.change.Change.subject","text":"","title":"subject"},{"location":"loudflow/realm/changes/change-reference/#loudflow.realm.changes.change.Change.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/changes/change-reference/#loudflow.realm.changes.change.Change.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/changes/change-reference/#loudflow.realm.changes.change.Change.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/changes/change-reference/#loudflow.realm.changes.change.Change.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/changes/change-reference/#loudflow.realm.changes.change.Change.__post_init__","text":"Source code in loudflow/realm/changes/change.py def __post_init__ ( self ) -> None : if self . subject is None : message = \"Missing required attribute [subject: str] in Change.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . subject , str ): message = \"Invalid type for attribute [subject: str] in Change.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/changes/change-reference/#loudflow.realm.changes.change.Change.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/changes/change-reference/#loudflow.realm.changes.change.Change.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/changes/creation-reference/","text":"Module: creation \u00b6 Class: Creation \u00b6 Change due to creation. x : int dataclass-field \u00b6 y : int dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , subject , x , y ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/changes/creation.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . x is None : message = \"Missing required attribute [x: int] in Creation.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . x , int ): message = \"Invalid type for attribute [x: int] in Creation.\" logger . error ( message ) raise ValueError ( message ) if self . y is None : message = \"Missing required attribute [y: int] in Creation.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . y , int ): message = \"Invalid type for attribute [y: int] in Creation.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6","title":"creation"},{"location":"loudflow/realm/changes/creation-reference/#module-creation","text":"","title":"Module: creation"},{"location":"loudflow/realm/changes/creation-reference/#class-creation","text":"Change due to creation.","title":"Class: Creation"},{"location":"loudflow/realm/changes/creation-reference/#loudflow.realm.changes.creation.Creation.x","text":"","title":"x"},{"location":"loudflow/realm/changes/creation-reference/#loudflow.realm.changes.creation.Creation.y","text":"","title":"y"},{"location":"loudflow/realm/changes/creation-reference/#loudflow.realm.changes.creation.Creation.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/changes/creation-reference/#loudflow.realm.changes.creation.Creation.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/changes/creation-reference/#loudflow.realm.changes.creation.Creation.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/changes/creation-reference/#loudflow.realm.changes.creation.Creation.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/changes/creation-reference/#loudflow.realm.changes.creation.Creation.__post_init__","text":"Source code in loudflow/realm/changes/creation.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . x is None : message = \"Missing required attribute [x: int] in Creation.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . x , int ): message = \"Invalid type for attribute [x: int] in Creation.\" logger . error ( message ) raise ValueError ( message ) if self . y is None : message = \"Missing required attribute [y: int] in Creation.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . y , int ): message = \"Invalid type for attribute [y: int] in Creation.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/changes/creation-reference/#loudflow.realm.changes.creation.Creation.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/changes/creation-reference/#loudflow.realm.changes.creation.Creation.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/changes/destruction-reference/","text":"Module: destruction \u00b6 Class: Destruction \u00b6 Change due to destruction. __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , subject ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/changes/destruction.py def __post_init__ ( self ) -> None : super () . __post_init__ () __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6","title":"destruction"},{"location":"loudflow/realm/changes/destruction-reference/#module-destruction","text":"","title":"Module: destruction"},{"location":"loudflow/realm/changes/destruction-reference/#class-destruction","text":"Change due to destruction.","title":"Class: Destruction"},{"location":"loudflow/realm/changes/destruction-reference/#loudflow.realm.changes.destruction.Destruction.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/changes/destruction-reference/#loudflow.realm.changes.destruction.Destruction.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/changes/destruction-reference/#loudflow.realm.changes.destruction.Destruction.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/changes/destruction-reference/#loudflow.realm.changes.destruction.Destruction.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/changes/destruction-reference/#loudflow.realm.changes.destruction.Destruction.__post_init__","text":"Source code in loudflow/realm/changes/destruction.py def __post_init__ ( self ) -> None : super () . __post_init__ ()","title":"__post_init__()"},{"location":"loudflow/realm/changes/destruction-reference/#loudflow.realm.changes.destruction.Destruction.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/changes/destruction-reference/#loudflow.realm.changes.destruction.Destruction.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/changes/movement-reference/","text":"Module: movement \u00b6 Class: Movement \u00b6 Change due to movement. x : int dataclass-field \u00b6 y : int dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , subject , x , y ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/changes/movement.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . x is None : message = \"Missing required attribute [x: int] in Change.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . x , int ): message = \"Invalid type for attribute [x: int] in Change.\" logger . error ( message ) raise ValueError ( message ) if self . y is None : message = \"Missing required attribute [y: int] in Change.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . y , int ): message = \"Invalid type for attribute [y: int] in Change.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6","title":"movement"},{"location":"loudflow/realm/changes/movement-reference/#module-movement","text":"","title":"Module: movement"},{"location":"loudflow/realm/changes/movement-reference/#class-movement","text":"Change due to movement.","title":"Class: Movement"},{"location":"loudflow/realm/changes/movement-reference/#loudflow.realm.changes.movement.Movement.x","text":"","title":"x"},{"location":"loudflow/realm/changes/movement-reference/#loudflow.realm.changes.movement.Movement.y","text":"","title":"y"},{"location":"loudflow/realm/changes/movement-reference/#loudflow.realm.changes.movement.Movement.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/changes/movement-reference/#loudflow.realm.changes.movement.Movement.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/changes/movement-reference/#loudflow.realm.changes.movement.Movement.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/changes/movement-reference/#loudflow.realm.changes.movement.Movement.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/changes/movement-reference/#loudflow.realm.changes.movement.Movement.__post_init__","text":"Source code in loudflow/realm/changes/movement.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . x is None : message = \"Missing required attribute [x: int] in Change.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . x , int ): message = \"Invalid type for attribute [x: int] in Change.\" logger . error ( message ) raise ValueError ( message ) if self . y is None : message = \"Missing required attribute [y: int] in Change.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . y , int ): message = \"Invalid type for attribute [y: int] in Change.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/changes/movement-reference/#loudflow.realm.changes.movement.Movement.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/changes/movement-reference/#loudflow.realm.changes.movement.Movement.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/displays/console-reference/","text":"Module: console \u00b6 Class: Console \u00b6 Console displays class. The displays in which the worlds and its occupants may be viewed. Attributes: Name Type Description config World configuration data. __init__ ( self , world , config ) special \u00b6 Source code in loudflow/realm/displays/console.py @trace () def __init__ ( self , world : World , config : ConsoleConfiguration ) -> None : logger . info ( \"Constructing console...\" ) super () . __init__ ( world , config ) path = Path ( __file__ ) . parent / config . tileset self . tileset = tcod . tileset . load_tilesheet ( path , 32 , 8 , tcod . tileset . CHARMAP_TCOD ) self . player = world . things . get ( config . player , None ) if self . player is None : message = \"Thing [ {} ] cannot be found in worlds [ {} ].\" . format ( config . player , world . id ) logger . error ( message ) raise ValueError ( message ) self . context = tcod . context . new ( columns = self . world . width , rows = self . world . height , tileset = self . tileset , title = self . world . name , vsync = True , ) self . view = tcod . Console ( self . world . width , self . world . height , order = \"F\" ) self . update () event_handler ( self , event ) \u00b6 Handle displays events. Parameters: Name Type Description Default event tcod.event.T Display events. required Source code in loudflow/realm/displays/console.py @trace () def event_handler ( self , event : tcod . event . T ) -> None : \"\"\"Handle displays events. Args: event: Display events. \"\"\" if event . type == \"QUIT\" : self . context . close () raise SystemExit () if self . player is not None : if event . type == \"KEYDOWN\" : key = event . sym if key == tcod . event . K_UP : self . world . actions . on_next ( ActionEvent ( action = Move ( self . player . id , 0 , - 1 ))) elif key == tcod . event . K_DOWN : self . world . actions . on_next ( ActionEvent ( action = Move ( self . player . id , 0 , 1 ))) elif key == tcod . event . K_LEFT : self . world . actions . on_next ( ActionEvent ( action = Move ( self . player . id , - 1 , 0 ))) elif key == tcod . event . K_RIGHT : self . world . actions . on_next ( ActionEvent ( action = Move ( self . player . id , 1 , 0 ))) elif key == tcod . event . K_ESCAPE : pass show ( self ) \u00b6 Show worlds in the displays. Source code in loudflow/realm/displays/console.py @trace () def show ( self ) -> None : \"\"\"Show worlds in the displays.\"\"\" super () . show () while True : for event in tcod . event . wait (): self . context . convert_event ( event ) self . event_handler ( event ) update ( self ) \u00b6 Update displays. Source code in loudflow/realm/displays/console.py @trace () def update ( self ) -> None : \"\"\"Update displays.\"\"\" self . view . clear () for thing in self . world . things . values (): self . view . print ( x = thing . x , y = thing . y , string = thing . char , fg = thing . color ) self . context . present ( self . view ) Class: DisplayConfiguration \u00b6 Console configuration class. Immutable dataclass containing ConsoleConfiguration data. player : Optional [ str ] dataclass-field \u00b6 tileset : str dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , tileset = 'dejavu10x10_gs_tc.png' , player = None ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/displays/console.py def __post_init__ ( self ) -> None : if self . tileset is None : message = \"Missing required attribute [tileset: str] in DisplayConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . tileset , str ): message = \"Invalid type for attribute [tileset: str] in DisplayConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . player is not None and not isinstance ( self . player , str ): message = \"Invalid type for attribute [player: str] in DisplayConfiguration.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6 build ( config ) staticmethod \u00b6 Build ConsoleConfiguration from dictionary of configuration data. Parameters: Name Type Description Default config Dict Dictionary containing configuration data. required Returns: Type Description ConsoleConfiguration An instance of loudflow.realm.displays.console.ConsoleConfiguration . Source code in loudflow/realm/displays/console.py @staticmethod @trace () def build ( config : Dict ) -> ConsoleConfiguration : \"\"\"Build ConsoleConfiguration from dictionary of configuration data. Args: config: Dictionary containing configuration data. Returns: An instance of `loudflow.realm.displays.console.ConsoleConfiguration`. \"\"\" if config is None : message = \"Missing required argument [config: Dict] in [ConsoleConfiguration.build] method call.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( config , Dict ): message = \"Invalid argument type: [config: Dict] must be Dict in [ConsoleConfiguration.build] method call.\" logger . error ( message ) raise TypeError ( message ) # noinspection PyArgumentList # TODO: Remove noinspection after pycharm bug is fixed for incorrect unexpected argument warning for dataclasses return ConsoleConfiguration ( tileset = config . get ( \"tileset\" , None ), player = config . get ( \"player\" , None )) copy ( self , ** attributes ) \u00b6 Copy ConsoleConfiguration state while replacing attributes with new values, and return new immutable instance. Parameters: Name Type Description Default **attributes Any New configuration attributes. {} Returns: Type Description ConsoleConfiguration An instance of loudflow.realm.displays.console.ConsoleConfiguration . Source code in loudflow/realm/displays/console.py @trace () def copy ( self , ** attributes : Any ) -> ConsoleConfiguration : \"\"\" Copy ConsoleConfiguration state while replacing attributes with new values, and return new immutable instance. Args: **attributes: New configuration attributes. Returns: An instance of `loudflow.realm.displays.console.ConsoleConfiguration`. \"\"\" tileset = attributes . get ( \"tileset\" , None ) if \"tileset\" in attributes . keys () else self . tileset player = attributes . get ( \"player\" , None ) if \"player\" in attributes . keys () else self . player # noinspection PyArgumentList # TODO: Remove noinspection after pycharm bug is fixed for incorrect unexpected argument warning for dataclasses return ConsoleConfiguration ( tileset = tileset , player = player )","title":"console"},{"location":"loudflow/realm/displays/console-reference/#module-console","text":"","title":"Module: console"},{"location":"loudflow/realm/displays/console-reference/#class-console","text":"Console displays class. The displays in which the worlds and its occupants may be viewed. Attributes: Name Type Description config World configuration data.","title":"Class: Console"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.Console.__init__","text":"Source code in loudflow/realm/displays/console.py @trace () def __init__ ( self , world : World , config : ConsoleConfiguration ) -> None : logger . info ( \"Constructing console...\" ) super () . __init__ ( world , config ) path = Path ( __file__ ) . parent / config . tileset self . tileset = tcod . tileset . load_tilesheet ( path , 32 , 8 , tcod . tileset . CHARMAP_TCOD ) self . player = world . things . get ( config . player , None ) if self . player is None : message = \"Thing [ {} ] cannot be found in worlds [ {} ].\" . format ( config . player , world . id ) logger . error ( message ) raise ValueError ( message ) self . context = tcod . context . new ( columns = self . world . width , rows = self . world . height , tileset = self . tileset , title = self . world . name , vsync = True , ) self . view = tcod . Console ( self . world . width , self . world . height , order = \"F\" ) self . update ()","title":"__init__()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.Console.event_handler","text":"Handle displays events. Parameters: Name Type Description Default event tcod.event.T Display events. required Source code in loudflow/realm/displays/console.py @trace () def event_handler ( self , event : tcod . event . T ) -> None : \"\"\"Handle displays events. Args: event: Display events. \"\"\" if event . type == \"QUIT\" : self . context . close () raise SystemExit () if self . player is not None : if event . type == \"KEYDOWN\" : key = event . sym if key == tcod . event . K_UP : self . world . actions . on_next ( ActionEvent ( action = Move ( self . player . id , 0 , - 1 ))) elif key == tcod . event . K_DOWN : self . world . actions . on_next ( ActionEvent ( action = Move ( self . player . id , 0 , 1 ))) elif key == tcod . event . K_LEFT : self . world . actions . on_next ( ActionEvent ( action = Move ( self . player . id , - 1 , 0 ))) elif key == tcod . event . K_RIGHT : self . world . actions . on_next ( ActionEvent ( action = Move ( self . player . id , 1 , 0 ))) elif key == tcod . event . K_ESCAPE : pass","title":"event_handler()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.Console.show","text":"Show worlds in the displays. Source code in loudflow/realm/displays/console.py @trace () def show ( self ) -> None : \"\"\"Show worlds in the displays.\"\"\" super () . show () while True : for event in tcod . event . wait (): self . context . convert_event ( event ) self . event_handler ( event )","title":"show()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.Console.update","text":"Update displays. Source code in loudflow/realm/displays/console.py @trace () def update ( self ) -> None : \"\"\"Update displays.\"\"\" self . view . clear () for thing in self . world . things . values (): self . view . print ( x = thing . x , y = thing . y , string = thing . char , fg = thing . color ) self . context . present ( self . view )","title":"update()"},{"location":"loudflow/realm/displays/console-reference/#class-displayconfiguration","text":"Console configuration class. Immutable dataclass containing ConsoleConfiguration data.","title":"Class: DisplayConfiguration"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.player","text":"","title":"player"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.tileset","text":"","title":"tileset"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.__post_init__","text":"Source code in loudflow/realm/displays/console.py def __post_init__ ( self ) -> None : if self . tileset is None : message = \"Missing required attribute [tileset: str] in DisplayConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . tileset , str ): message = \"Invalid type for attribute [tileset: str] in DisplayConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . player is not None and not isinstance ( self . player , str ): message = \"Invalid type for attribute [player: str] in DisplayConfiguration.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.build","text":"Build ConsoleConfiguration from dictionary of configuration data. Parameters: Name Type Description Default config Dict Dictionary containing configuration data. required Returns: Type Description ConsoleConfiguration An instance of loudflow.realm.displays.console.ConsoleConfiguration . Source code in loudflow/realm/displays/console.py @staticmethod @trace () def build ( config : Dict ) -> ConsoleConfiguration : \"\"\"Build ConsoleConfiguration from dictionary of configuration data. Args: config: Dictionary containing configuration data. Returns: An instance of `loudflow.realm.displays.console.ConsoleConfiguration`. \"\"\" if config is None : message = \"Missing required argument [config: Dict] in [ConsoleConfiguration.build] method call.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( config , Dict ): message = \"Invalid argument type: [config: Dict] must be Dict in [ConsoleConfiguration.build] method call.\" logger . error ( message ) raise TypeError ( message ) # noinspection PyArgumentList # TODO: Remove noinspection after pycharm bug is fixed for incorrect unexpected argument warning for dataclasses return ConsoleConfiguration ( tileset = config . get ( \"tileset\" , None ), player = config . get ( \"player\" , None ))","title":"build()"},{"location":"loudflow/realm/displays/console-reference/#loudflow.realm.displays.console.ConsoleConfiguration.copy","text":"Copy ConsoleConfiguration state while replacing attributes with new values, and return new immutable instance. Parameters: Name Type Description Default **attributes Any New configuration attributes. {} Returns: Type Description ConsoleConfiguration An instance of loudflow.realm.displays.console.ConsoleConfiguration . Source code in loudflow/realm/displays/console.py @trace () def copy ( self , ** attributes : Any ) -> ConsoleConfiguration : \"\"\" Copy ConsoleConfiguration state while replacing attributes with new values, and return new immutable instance. Args: **attributes: New configuration attributes. Returns: An instance of `loudflow.realm.displays.console.ConsoleConfiguration`. \"\"\" tileset = attributes . get ( \"tileset\" , None ) if \"tileset\" in attributes . keys () else self . tileset player = attributes . get ( \"player\" , None ) if \"player\" in attributes . keys () else self . player # noinspection PyArgumentList # TODO: Remove noinspection after pycharm bug is fixed for incorrect unexpected argument warning for dataclasses return ConsoleConfiguration ( tileset = tileset , player = player )","title":"copy()"},{"location":"loudflow/realm/displays/display-reference/","text":"Module: display \u00b6 Class: Display \u00b6 Base displays class. The displays in which the worlds and its occupants may be viewed. Attributes: Name Type Description world World config World configuration data. __init__ ( self , world , config ) special \u00b6 Source code in loudflow/realm/displays/display.py @trace () def __init__ ( self , world : World , config : DisplayConfiguration ) -> None : logger . info ( \"Constructing displays...\" ) super () . __init__ () self . id = str ( uuid4 ()) self . world = world self . config = config self . subscription = None event_handler ( self , event ) \u00b6 Handle displays events. Parameters: Name Type Description Default event Any Display events. required Source code in loudflow/realm/displays/display.py @abstractmethod def event_handler ( self , event : Any ) -> None : \"\"\"Handle displays events. Args: event: Display events. \"\"\" pass on_next ( self , event ) \u00b6 Handles update events. Parameters: Name Type Description Default event Union[ActionFailed, ActionSucceeded] Update events. required Source code in loudflow/realm/displays/display.py @trace () @timer () def on_next ( self , event : Union [ ActionFailed , ActionSucceeded ]) -> None : \"\"\"Handles update events. Args: event: Update events. \"\"\" self . update () show ( self ) \u00b6 Show worlds in the displays. Source code in loudflow/realm/displays/display.py @abstractmethod def show ( self ) -> None : \"\"\"Show worlds in the displays.\"\"\" pipe = self . world . events . pipe ( filter ( lambda event : isinstance ( event , ActionSucceeded ) or isinstance ( event , ActionFailed )) ) self . subscription = pipe . subscribe ( self ) update ( self ) \u00b6 Update displays. Source code in loudflow/realm/displays/display.py @abstractmethod def update ( self ) -> None : \"\"\"Update displays.\"\"\" pass Class: DisplayConfiguration \u00b6 Display configuration class. Immutable dataclass containing DisplayConfiguration data. __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self ) special \u00b6 __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6 build ( config ) staticmethod \u00b6 Build DisplayConfiguration from dictionary of configuration data. Parameters: Name Type Description Default config Dict Dictionary containing configuration data. required Returns: Type Description DisplayConfiguration An instance of loudflow.realm.displays.displays.DisplayConfiguration . Source code in loudflow/realm/displays/display.py @staticmethod @abstractmethod def build ( config : Dict ) -> DisplayConfiguration : \"\"\"Build DisplayConfiguration from dictionary of configuration data. Args: config: Dictionary containing configuration data. Returns: An instance of `loudflow.realm.displays.displays.DisplayConfiguration`. \"\"\" pass copy ( self , ** attributes ) \u00b6 Copy DisplayConfiguration state while replacing attributes with new values, and return new immutable instance. Parameters: Name Type Description Default **attributes Any New configuration attributes. {} Returns: Type Description DisplayConfiguration An instance of loudflow.realm.displays.displays.DisplayConfiguration . Source code in loudflow/realm/displays/display.py @abstractmethod def copy ( self , ** attributes : Any ) -> DisplayConfiguration : \"\"\" Copy DisplayConfiguration state while replacing attributes with new values, and return new immutable instance. Args: **attributes: New configuration attributes. Returns: An instance of `loudflow.realm.displays.displays.DisplayConfiguration`. \"\"\" pass","title":"display"},{"location":"loudflow/realm/displays/display-reference/#module-display","text":"","title":"Module: display"},{"location":"loudflow/realm/displays/display-reference/#class-display","text":"Base displays class. The displays in which the worlds and its occupants may be viewed. Attributes: Name Type Description world World config World configuration data.","title":"Class: Display"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.Display.__init__","text":"Source code in loudflow/realm/displays/display.py @trace () def __init__ ( self , world : World , config : DisplayConfiguration ) -> None : logger . info ( \"Constructing displays...\" ) super () . __init__ () self . id = str ( uuid4 ()) self . world = world self . config = config self . subscription = None","title":"__init__()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.Display.event_handler","text":"Handle displays events. Parameters: Name Type Description Default event Any Display events. required Source code in loudflow/realm/displays/display.py @abstractmethod def event_handler ( self , event : Any ) -> None : \"\"\"Handle displays events. Args: event: Display events. \"\"\" pass","title":"event_handler()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.Display.on_next","text":"Handles update events. Parameters: Name Type Description Default event Union[ActionFailed, ActionSucceeded] Update events. required Source code in loudflow/realm/displays/display.py @trace () @timer () def on_next ( self , event : Union [ ActionFailed , ActionSucceeded ]) -> None : \"\"\"Handles update events. Args: event: Update events. \"\"\" self . update ()","title":"on_next()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.Display.show","text":"Show worlds in the displays. Source code in loudflow/realm/displays/display.py @abstractmethod def show ( self ) -> None : \"\"\"Show worlds in the displays.\"\"\" pipe = self . world . events . pipe ( filter ( lambda event : isinstance ( event , ActionSucceeded ) or isinstance ( event , ActionFailed )) ) self . subscription = pipe . subscribe ( self )","title":"show()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.Display.update","text":"Update displays. Source code in loudflow/realm/displays/display.py @abstractmethod def update ( self ) -> None : \"\"\"Update displays.\"\"\" pass","title":"update()"},{"location":"loudflow/realm/displays/display-reference/#class-displayconfiguration","text":"Display configuration class. Immutable dataclass containing DisplayConfiguration data.","title":"Class: DisplayConfiguration"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.DisplayConfiguration.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.DisplayConfiguration.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.DisplayConfiguration.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.DisplayConfiguration.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.DisplayConfiguration.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.DisplayConfiguration.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.DisplayConfiguration.build","text":"Build DisplayConfiguration from dictionary of configuration data. Parameters: Name Type Description Default config Dict Dictionary containing configuration data. required Returns: Type Description DisplayConfiguration An instance of loudflow.realm.displays.displays.DisplayConfiguration . Source code in loudflow/realm/displays/display.py @staticmethod @abstractmethod def build ( config : Dict ) -> DisplayConfiguration : \"\"\"Build DisplayConfiguration from dictionary of configuration data. Args: config: Dictionary containing configuration data. Returns: An instance of `loudflow.realm.displays.displays.DisplayConfiguration`. \"\"\" pass","title":"build()"},{"location":"loudflow/realm/displays/display-reference/#loudflow.realm.displays.display.DisplayConfiguration.copy","text":"Copy DisplayConfiguration state while replacing attributes with new values, and return new immutable instance. Parameters: Name Type Description Default **attributes Any New configuration attributes. {} Returns: Type Description DisplayConfiguration An instance of loudflow.realm.displays.displays.DisplayConfiguration . Source code in loudflow/realm/displays/display.py @abstractmethod def copy ( self , ** attributes : Any ) -> DisplayConfiguration : \"\"\" Copy DisplayConfiguration state while replacing attributes with new values, and return new immutable instance. Args: **attributes: New configuration attributes. Returns: An instance of `loudflow.realm.displays.displays.DisplayConfiguration`. \"\"\" pass","title":"copy()"},{"location":"loudflow/realm/events/action-event-reference/","text":"Module: action_event \u00b6 Class: ActionEvent \u00b6 Action events class. Immutable dataclass for actions events. action : Action dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , action ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/events/action_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . action is None : message = \"Missing required attribute [actions: Action] in ActionEvent.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . action , Action ): message = \"Invalid type for attribute [actions: Action] in ActionEvent.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6 Class: ActionDoneEvent \u00b6 Action succeeded events class. Immutable dataclass for actions succeeded events. action_event_id : str dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , action_event_id ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/events/action_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . action_event_id is None : message = \"Missing required attribute [action_event_id: str] in ActionSucceeded.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . action_event_id , str ): message = \"Invalid type for attribute [action_event_id: str] in ActionSucceeded.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6 Class: ActionFailedEvent \u00b6 Action failed events class. Immutable dataclass for actions failed events. action_event_id : str dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , action_event_id ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/events/action_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . action_event_id is None : message = \"Missing required attribute [action_event_id: str] in ActionFailed.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . action_event_id , str ): message = \"Invalid type for attribute [action_event_id: str] in ActionFailed.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6","title":"action_event"},{"location":"loudflow/realm/events/action-event-reference/#module-action_event","text":"","title":"Module: action_event"},{"location":"loudflow/realm/events/action-event-reference/#class-actionevent","text":"Action events class. Immutable dataclass for actions events.","title":"Class: ActionEvent"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionEvent.action","text":"","title":"action"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionEvent.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionEvent.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionEvent.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionEvent.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionEvent.__post_init__","text":"Source code in loudflow/realm/events/action_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . action is None : message = \"Missing required attribute [actions: Action] in ActionEvent.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . action , Action ): message = \"Invalid type for attribute [actions: Action] in ActionEvent.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionEvent.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionEvent.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/events/action-event-reference/#class-actiondoneevent","text":"Action succeeded events class. Immutable dataclass for actions succeeded events.","title":"Class: ActionDoneEvent"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionSucceeded.action_event_id","text":"","title":"action_event_id"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionSucceeded.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionSucceeded.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionSucceeded.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionSucceeded.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionSucceeded.__post_init__","text":"Source code in loudflow/realm/events/action_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . action_event_id is None : message = \"Missing required attribute [action_event_id: str] in ActionSucceeded.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . action_event_id , str ): message = \"Invalid type for attribute [action_event_id: str] in ActionSucceeded.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionSucceeded.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionSucceeded.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/events/action-event-reference/#class-actionfailedevent","text":"Action failed events class. Immutable dataclass for actions failed events.","title":"Class: ActionFailedEvent"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionFailed.action_event_id","text":"","title":"action_event_id"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionFailed.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionFailed.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionFailed.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionFailed.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionFailed.__post_init__","text":"Source code in loudflow/realm/events/action_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . action_event_id is None : message = \"Missing required attribute [action_event_id: str] in ActionFailed.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . action_event_id , str ): message = \"Invalid type for attribute [action_event_id: str] in ActionFailed.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionFailed.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/events/action-event-reference/#loudflow.realm.events.action_event.ActionFailed.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/events/change-event-reference/","text":"Module: change_event \u00b6 Class: ChangeEvent \u00b6 Change events class. Immutable dataclass for change events. change : Change dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , change ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/events/change_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . change is None : message = \"Missing required attribute [changes: Change] in ChangeEvent.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . change , Change ): message = \"Invalid type for attribute [changes: Change] in ChangeEvent.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6 Class: ChangeDoneEvent \u00b6 Change success events class. Immutable dataclass for change succeeded events. change_event_id : str dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , change_event_id ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/events/change_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . change_event_id is None : message = \"Missing required attribute [change_event_id: str] in ChangeSucceeded.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . change_event_id , str ): message = \"Invalid type for attribute [change_event_id: str] in ChangeSucceeded.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6 Class: ChangeFailedEvent \u00b6 Change failed events class. Immutable dataclass for change failed events. change_event_id : str dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , change_event_id ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/events/change_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . change_event_id is None : message = \"Missing required attribute [change_event_id: str] in ChangeFailed.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . change_event_id , str ): message = \"Invalid type for attribute [change_event_id: str] in ChangeFailed.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6","title":"change_event"},{"location":"loudflow/realm/events/change-event-reference/#module-change_event","text":"","title":"Module: change_event"},{"location":"loudflow/realm/events/change-event-reference/#class-changeevent","text":"Change events class. Immutable dataclass for change events.","title":"Class: ChangeEvent"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeEvent.change","text":"","title":"change"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeEvent.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeEvent.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeEvent.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeEvent.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeEvent.__post_init__","text":"Source code in loudflow/realm/events/change_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . change is None : message = \"Missing required attribute [changes: Change] in ChangeEvent.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . change , Change ): message = \"Invalid type for attribute [changes: Change] in ChangeEvent.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeEvent.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeEvent.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/events/change-event-reference/#class-changedoneevent","text":"Change success events class. Immutable dataclass for change succeeded events.","title":"Class: ChangeDoneEvent"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeSucceeded.change_event_id","text":"","title":"change_event_id"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeSucceeded.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeSucceeded.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeSucceeded.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeSucceeded.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeSucceeded.__post_init__","text":"Source code in loudflow/realm/events/change_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . change_event_id is None : message = \"Missing required attribute [change_event_id: str] in ChangeSucceeded.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . change_event_id , str ): message = \"Invalid type for attribute [change_event_id: str] in ChangeSucceeded.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeSucceeded.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeSucceeded.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/events/change-event-reference/#class-changefailedevent","text":"Change failed events class. Immutable dataclass for change failed events.","title":"Class: ChangeFailedEvent"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeFailed.change_event_id","text":"","title":"change_event_id"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeFailed.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeFailed.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeFailed.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeFailed.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeFailed.__post_init__","text":"Source code in loudflow/realm/events/change_event.py def __post_init__ ( self ) -> None : super () . __post_init__ () if self . change_event_id is None : message = \"Missing required attribute [change_event_id: str] in ChangeFailed.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . change_event_id , str ): message = \"Invalid type for attribute [change_event_id: str] in ChangeFailed.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeFailed.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/events/change-event-reference/#loudflow.realm.events.change_event.ChangeFailed.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/events/event-reference/","text":"Module: event \u00b6 Class: Event \u00b6 Event class. Immutable dataclass for events data. __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/events/event.py def __post_init__ ( self ) -> None : object . __setattr__ ( self , \"event_id\" , str ( uuid4 ())) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6","title":"event"},{"location":"loudflow/realm/events/event-reference/#module-event","text":"","title":"Module: event"},{"location":"loudflow/realm/events/event-reference/#class-event","text":"Event class. Immutable dataclass for events data.","title":"Class: Event"},{"location":"loudflow/realm/events/event-reference/#loudflow.realm.events.event.Event.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/events/event-reference/#loudflow.realm.events.event.Event.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/events/event-reference/#loudflow.realm.events.event.Event.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/events/event-reference/#loudflow.realm.events.event.Event.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/events/event-reference/#loudflow.realm.events.event.Event.__post_init__","text":"Source code in loudflow/realm/events/event.py def __post_init__ ( self ) -> None : object . __setattr__ ( self , \"event_id\" , str ( uuid4 ()))","title":"__post_init__()"},{"location":"loudflow/realm/events/event-reference/#loudflow.realm.events.event.Event.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/events/event-reference/#loudflow.realm.events.event.Event.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/things/thing-reference/","text":"Module: thing \u00b6 Class: Thing \u00b6 Thing class. Things populating the worlds. Attributes: Name Type Description config Thing configuration data. __init__ ( self , config ) special \u00b6 Source code in loudflow/realm/things/thing.py @trace () def __init__ ( self , config : ThingConfiguration ) -> None : self . id = str ( uuid4 ()) self . kind = config . kind self . name = config . name self . x = config . x self . y = config . y self . char = config . char self . color = config . color self . can_move = config . can_move self . can_be_destroyed = config . can_be_destroyed self . can_destroy = config . can_destroy destroys ( self , thing ) \u00b6 Can things destroy things? Parameters: Name Type Description Default thing Thing Target things to destroy. required Returns: Type Description bool True if things can destroy target things. Source code in loudflow/realm/things/thing.py @trace () def destroys ( self , thing : Thing ) -> bool : \"\"\"Can things destroy things? Args: thing: Target things to destroy. Returns: True if things can destroy target things. \"\"\" if thing is None : message = \"Missing required argument [things: Thing] in Thing.destroys method.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( thing , Thing ): message = \"Invalid type for argument [things: Thing] in Thing.destroys method.\" logger . error ( message ) raise ValueError ( message ) return thing . can_be_destroyed and thing . kind . lower () in { value . lower () for value in self . can_destroy } is_destroyed_by ( self , thing ) \u00b6 Can things be destroyed by things? Parameters: Name Type Description Default thing Thing Target things to destroy. required Returns: Type Description bool True if things can destroy target things. Source code in loudflow/realm/things/thing.py @trace () def is_destroyed_by ( self , thing : Thing ) -> bool : \"\"\"Can things be destroyed by things? Args: thing: Target things to destroy. Returns: True if things can destroy target things. \"\"\" if thing is None : message = \"Missing required argument [things: Thing] in Thing.is_destroyed_by method.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( thing , Thing ): message = \"Invalid type for argument [things: Thing] in Thing.is_destroyed_by method.\" logger . error ( message ) raise ValueError ( message ) return self . can_be_destroyed and self . kind . lower () in { value . lower () for value in thing . can_destroy } pushes ( self , thing ) \u00b6 Can self push things? Parameters: Name Type Description Default thing Thing Thing to be pushed. required Returns: Type Description bool True if things can be pushed. Source code in loudflow/realm/things/thing.py @trace () def pushes ( self , thing : Thing ) -> bool : \"\"\"Can self push things? Args: thing: Thing to be pushed. Returns: True if things can be pushed. \"\"\" if thing is None : message = \"Missing required argument [things: Thing] in Thing.pushes method.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( thing , Thing ): message = \"Invalid type for argument [things: Thing] in Thing.pushes method.\" logger . error ( message ) raise ValueError ( message ) if not self . can_move : return False elif not thing . can_move : return False elif self . destroys ( thing ) or self . is_destroyed_by ( thing ): return False return True Class: ThingConfiguration \u00b6 Thing configuration class. Immutable dataclass containing things configuration data. can_be_destroyed : bool dataclass-field \u00b6 can_destroy : Set [ str ] dataclass-field \u00b6 can_move : bool dataclass-field \u00b6 char : str dataclass-field \u00b6 color : Tuple [ int , int , int ] dataclass-field \u00b6 kind : str dataclass-field \u00b6 name : str dataclass-field \u00b6 x : int dataclass-field \u00b6 y : int dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , kind , name , x , y , char , color , can_move = False , can_be_destroyed = False , can_destroy =< factory > ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/things/thing.py def __post_init__ ( self ) -> None : if self . kind is None : message = \"Missing required attribute [kind: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . kind , str ): message = \"Invalid type for attribute [kind: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . name is None : message = \"Missing required attribute [name: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . name , str ): message = \"Invalid type for attribute [name: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . x is None : message = \"Missing required attribute [x: int] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . x , int ): message = \"Invalid type for attribute [x: int] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . y is None : message = \"Missing required attribute [y: int] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . y , int ): message = \"Invalid type for attribute [y: int] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . char is None : message = \"Missing required attribute [char: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . char , str ): message = \"Invalid type for attribute [char: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if len ( self . char ) > 1 : message = \"Invalid attribute [char: str] in ThingConfiguration. [char: str] must be a single character.\" logger . error ( message ) raise ValueError ( message ) if self . color is None : message = \"Missing required attribute [color: Tuple[int, int, int]] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . color , tuple ): message = \"Invalid type for attribute [color: Tuple[int, int, int]] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if len ( self . color ) != 3 : message = ( \"Invalid attribute [color: Tuple[int, int, int]] in ThingConfiguration. \" \"[color: Tuple[int,int, int]] must consist of three integers. \" ) logger . error ( message ) raise ValueError ( message ) if not all ( isinstance ( value , int ) for value in self . color ): message = ( \"Invalid attribute [color: Tuple[int, int, int]] in ThingConfiguration. \" \"[color: Tuple[int, int, int]] values must be integer.\" ) logger . error ( message ) raise ValueError ( message ) if self . can_move is None : object . __setattr__ ( self , \"can_move\" , False ) if not isinstance ( self . can_move , bool ): message = \"Invalid type for attribute [can_move: bool] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . can_be_destroyed is None : object . __setattr__ ( self , \"can_be_destroyed\" , False ) if not isinstance ( self . can_be_destroyed , bool ): message = \"Invalid type for attribute [can_be_destroyed: bool] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . can_destroy is None : object . __setattr__ ( self , \"can_destroy\" , {}) if not isinstance ( self . can_destroy , set ): message = \"Invalid type for attribute [can_destroy: set[str]] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6 build ( config ) staticmethod \u00b6 Build ThingConfiguration from dictionary of configuration data. Parameters: Name Type Description Default config Dict Dictionary containing configuration data. required Returns: Type Description ThingConfiguration An instance of loudflow.realm.things.ThingConfiguration . Source code in loudflow/realm/things/thing.py @staticmethod @trace () def build ( config : Dict ) -> ThingConfiguration : \"\"\"Build ThingConfiguration from dictionary of configuration data. Args: config: Dictionary containing configuration data. Returns: An instance of `loudflow.realm.things.ThingConfiguration`. \"\"\" if config is None : message = \"Missing required argument [config: Dict] in [ThingConfiguration.build] method call.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( config , Dict ): message = \"Invalid argument type: [config: Dict] must be Dict in [ThingConfiguration.build] method call.\" logger . error ( message ) raise TypeError ( message ) # noinspection PyArgumentList # TODO: Remove noinspection after pycharm bug is fixed for incorrect unexpected argument warning for dataclasses return ThingConfiguration ( kind = config . get ( \"kind\" , None ), x = config . get ( \"x\" , None ), y = config . get ( \"y\" , None ), name = config . get ( \"name\" , None ), char = config . get ( \"char\" , None ), color = config . get ( \"color\" , None ), can_move = config . get ( \"can_move\" , None ), can_be_destroyed = config . get ( \"can_be_destroyed\" , None ), can_destroy = config . get ( \"can_destroy\" , {}), ) copy ( self , ** attributes ) \u00b6 Copy ThingConfiguration state while replacing attributes with new values, and return new immutable instance. Parameters: Name Type Description Default **attributes Any New ThingConfiguration attributes. {} Returns: Type Description ThingConfiguration An instance of loudflow.realm.things.ThingConfiguration . Source code in loudflow/realm/things/thing.py @trace () def copy ( self , ** attributes : Any ) -> ThingConfiguration : \"\"\"Copy ThingConfiguration state while replacing attributes with new values, and return new immutable instance. Args: **attributes: New ThingConfiguration attributes. Returns: An instance of `loudflow.realm.things.ThingConfiguration`. \"\"\" kind = attributes . get ( \"kind\" , None ) if \"kind\" in attributes . keys () else self . kind name = attributes . get ( \"name\" , None ) if \"name\" in attributes . keys () else self . name x = attributes . get ( \"x\" , None ) if \"x\" in attributes . keys () else self . x y = attributes . get ( \"y\" , None ) if \"y\" in attributes . keys () else self . y char = attributes . get ( \"char\" , None ) if \"char\" in attributes . keys () else self . char color = attributes . get ( \"color\" , None ) if \"color\" in attributes . keys () else self . color can_move = attributes . get ( \"can_move\" , None ) if \"can_move\" in attributes . keys () else self . can_move can_be_destroyed = ( attributes . get ( \"can_be_destroyed\" , None ) if \"can_be_destroyed\" in attributes . keys () else self . can_be_destroyed ) can_destroy = attributes . get ( \"can_destroy\" , None ) if \"can_destroy\" in attributes . keys () else self . can_destroy # noinspection PyArgumentList # TODO: Remove noinspection after pycharm bug is fixed for incorrect unexpected argument warning for dataclasses return ThingConfiguration ( kind = kind , name = name , x = x , y = y , char = char , color = color , can_move = can_move , can_be_destroyed = can_be_destroyed , can_destroy = can_destroy , )","title":"thing"},{"location":"loudflow/realm/things/thing-reference/#module-thing","text":"","title":"Module: thing"},{"location":"loudflow/realm/things/thing-reference/#class-thing","text":"Thing class. Things populating the worlds. Attributes: Name Type Description config Thing configuration data.","title":"Class: Thing"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.Thing.__init__","text":"Source code in loudflow/realm/things/thing.py @trace () def __init__ ( self , config : ThingConfiguration ) -> None : self . id = str ( uuid4 ()) self . kind = config . kind self . name = config . name self . x = config . x self . y = config . y self . char = config . char self . color = config . color self . can_move = config . can_move self . can_be_destroyed = config . can_be_destroyed self . can_destroy = config . can_destroy","title":"__init__()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.Thing.destroys","text":"Can things destroy things? Parameters: Name Type Description Default thing Thing Target things to destroy. required Returns: Type Description bool True if things can destroy target things. Source code in loudflow/realm/things/thing.py @trace () def destroys ( self , thing : Thing ) -> bool : \"\"\"Can things destroy things? Args: thing: Target things to destroy. Returns: True if things can destroy target things. \"\"\" if thing is None : message = \"Missing required argument [things: Thing] in Thing.destroys method.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( thing , Thing ): message = \"Invalid type for argument [things: Thing] in Thing.destroys method.\" logger . error ( message ) raise ValueError ( message ) return thing . can_be_destroyed and thing . kind . lower () in { value . lower () for value in self . can_destroy }","title":"destroys()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.Thing.is_destroyed_by","text":"Can things be destroyed by things? Parameters: Name Type Description Default thing Thing Target things to destroy. required Returns: Type Description bool True if things can destroy target things. Source code in loudflow/realm/things/thing.py @trace () def is_destroyed_by ( self , thing : Thing ) -> bool : \"\"\"Can things be destroyed by things? Args: thing: Target things to destroy. Returns: True if things can destroy target things. \"\"\" if thing is None : message = \"Missing required argument [things: Thing] in Thing.is_destroyed_by method.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( thing , Thing ): message = \"Invalid type for argument [things: Thing] in Thing.is_destroyed_by method.\" logger . error ( message ) raise ValueError ( message ) return self . can_be_destroyed and self . kind . lower () in { value . lower () for value in thing . can_destroy }","title":"is_destroyed_by()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.Thing.pushes","text":"Can self push things? Parameters: Name Type Description Default thing Thing Thing to be pushed. required Returns: Type Description bool True if things can be pushed. Source code in loudflow/realm/things/thing.py @trace () def pushes ( self , thing : Thing ) -> bool : \"\"\"Can self push things? Args: thing: Thing to be pushed. Returns: True if things can be pushed. \"\"\" if thing is None : message = \"Missing required argument [things: Thing] in Thing.pushes method.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( thing , Thing ): message = \"Invalid type for argument [things: Thing] in Thing.pushes method.\" logger . error ( message ) raise ValueError ( message ) if not self . can_move : return False elif not thing . can_move : return False elif self . destroys ( thing ) or self . is_destroyed_by ( thing ): return False return True","title":"pushes()"},{"location":"loudflow/realm/things/thing-reference/#class-thingconfiguration","text":"Thing configuration class. Immutable dataclass containing things configuration data.","title":"Class: ThingConfiguration"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.can_be_destroyed","text":"","title":"can_be_destroyed"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.can_destroy","text":"","title":"can_destroy"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.can_move","text":"","title":"can_move"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.char","text":"","title":"char"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.color","text":"","title":"color"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.kind","text":"","title":"kind"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.name","text":"","title":"name"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.x","text":"","title":"x"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.y","text":"","title":"y"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.__post_init__","text":"Source code in loudflow/realm/things/thing.py def __post_init__ ( self ) -> None : if self . kind is None : message = \"Missing required attribute [kind: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . kind , str ): message = \"Invalid type for attribute [kind: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . name is None : message = \"Missing required attribute [name: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . name , str ): message = \"Invalid type for attribute [name: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . x is None : message = \"Missing required attribute [x: int] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . x , int ): message = \"Invalid type for attribute [x: int] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . y is None : message = \"Missing required attribute [y: int] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . y , int ): message = \"Invalid type for attribute [y: int] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . char is None : message = \"Missing required attribute [char: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . char , str ): message = \"Invalid type for attribute [char: str] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if len ( self . char ) > 1 : message = \"Invalid attribute [char: str] in ThingConfiguration. [char: str] must be a single character.\" logger . error ( message ) raise ValueError ( message ) if self . color is None : message = \"Missing required attribute [color: Tuple[int, int, int]] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . color , tuple ): message = \"Invalid type for attribute [color: Tuple[int, int, int]] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if len ( self . color ) != 3 : message = ( \"Invalid attribute [color: Tuple[int, int, int]] in ThingConfiguration. \" \"[color: Tuple[int,int, int]] must consist of three integers. \" ) logger . error ( message ) raise ValueError ( message ) if not all ( isinstance ( value , int ) for value in self . color ): message = ( \"Invalid attribute [color: Tuple[int, int, int]] in ThingConfiguration. \" \"[color: Tuple[int, int, int]] values must be integer.\" ) logger . error ( message ) raise ValueError ( message ) if self . can_move is None : object . __setattr__ ( self , \"can_move\" , False ) if not isinstance ( self . can_move , bool ): message = \"Invalid type for attribute [can_move: bool] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . can_be_destroyed is None : object . __setattr__ ( self , \"can_be_destroyed\" , False ) if not isinstance ( self . can_be_destroyed , bool ): message = \"Invalid type for attribute [can_be_destroyed: bool] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . can_destroy is None : object . __setattr__ ( self , \"can_destroy\" , {}) if not isinstance ( self . can_destroy , set ): message = \"Invalid type for attribute [can_destroy: set[str]] in ThingConfiguration.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.build","text":"Build ThingConfiguration from dictionary of configuration data. Parameters: Name Type Description Default config Dict Dictionary containing configuration data. required Returns: Type Description ThingConfiguration An instance of loudflow.realm.things.ThingConfiguration . Source code in loudflow/realm/things/thing.py @staticmethod @trace () def build ( config : Dict ) -> ThingConfiguration : \"\"\"Build ThingConfiguration from dictionary of configuration data. Args: config: Dictionary containing configuration data. Returns: An instance of `loudflow.realm.things.ThingConfiguration`. \"\"\" if config is None : message = \"Missing required argument [config: Dict] in [ThingConfiguration.build] method call.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( config , Dict ): message = \"Invalid argument type: [config: Dict] must be Dict in [ThingConfiguration.build] method call.\" logger . error ( message ) raise TypeError ( message ) # noinspection PyArgumentList # TODO: Remove noinspection after pycharm bug is fixed for incorrect unexpected argument warning for dataclasses return ThingConfiguration ( kind = config . get ( \"kind\" , None ), x = config . get ( \"x\" , None ), y = config . get ( \"y\" , None ), name = config . get ( \"name\" , None ), char = config . get ( \"char\" , None ), color = config . get ( \"color\" , None ), can_move = config . get ( \"can_move\" , None ), can_be_destroyed = config . get ( \"can_be_destroyed\" , None ), can_destroy = config . get ( \"can_destroy\" , {}), )","title":"build()"},{"location":"loudflow/realm/things/thing-reference/#loudflow.realm.things.thing.ThingConfiguration.copy","text":"Copy ThingConfiguration state while replacing attributes with new values, and return new immutable instance. Parameters: Name Type Description Default **attributes Any New ThingConfiguration attributes. {} Returns: Type Description ThingConfiguration An instance of loudflow.realm.things.ThingConfiguration . Source code in loudflow/realm/things/thing.py @trace () def copy ( self , ** attributes : Any ) -> ThingConfiguration : \"\"\"Copy ThingConfiguration state while replacing attributes with new values, and return new immutable instance. Args: **attributes: New ThingConfiguration attributes. Returns: An instance of `loudflow.realm.things.ThingConfiguration`. \"\"\" kind = attributes . get ( \"kind\" , None ) if \"kind\" in attributes . keys () else self . kind name = attributes . get ( \"name\" , None ) if \"name\" in attributes . keys () else self . name x = attributes . get ( \"x\" , None ) if \"x\" in attributes . keys () else self . x y = attributes . get ( \"y\" , None ) if \"y\" in attributes . keys () else self . y char = attributes . get ( \"char\" , None ) if \"char\" in attributes . keys () else self . char color = attributes . get ( \"color\" , None ) if \"color\" in attributes . keys () else self . color can_move = attributes . get ( \"can_move\" , None ) if \"can_move\" in attributes . keys () else self . can_move can_be_destroyed = ( attributes . get ( \"can_be_destroyed\" , None ) if \"can_be_destroyed\" in attributes . keys () else self . can_be_destroyed ) can_destroy = attributes . get ( \"can_destroy\" , None ) if \"can_destroy\" in attributes . keys () else self . can_destroy # noinspection PyArgumentList # TODO: Remove noinspection after pycharm bug is fixed for incorrect unexpected argument warning for dataclasses return ThingConfiguration ( kind = kind , name = name , x = x , y = y , char = char , color = color , can_move = can_move , can_be_destroyed = can_be_destroyed , can_destroy = can_destroy , )","title":"copy()"},{"location":"loudflow/realm/worlds/world-reference/","text":"Module: world \u00b6 Class: World \u00b6 World class. The worlds in which the agent(s) act. Attributes: Name Type Description config World configuration data. __init__ ( self , config ) special \u00b6 Source code in loudflow/realm/worlds/world.py @trace () def __init__ ( self , config : WorldConfiguration ) -> None : logger . info ( \"Constructing worlds...\" ) super () . __init__ () self . id = str ( uuid4 ()) self . config = config self . name = config . name self . width = config . width self . height = config . height self . things : Dict [ str , Thing ] = {} self . events = Subject () self . actions = Subject () self . subscription = None add ( self , thing , replace = True , silent = True ) \u00b6 Add things to worlds. Parameters: Name Type Description Default thing Thing Thing. required replace bool If True, replace existing tile. If False, log warning. True silent bool If True, do not log warnings. True Returns: Type Description bool True if things is added, False if not. Source code in loudflow/realm/worlds/world.py @trace () def add ( self , thing : Thing , replace : bool = True , silent : bool = True ) -> bool : \"\"\"Add things to worlds. Args: thing: Thing. replace: If True, replace existing tile. If False, log warning. silent: If True, do not log warnings. Returns: True if things is added, False if not. \"\"\" if replace : self . things [ thing . id ] = thing return True else : check = self . things . get ( thing . id , None ) if check is None : self . things [ thing . id ] = thing return True else : if not silent : logger . warning ( \"Cannot place things [ {} ] in worlds [ {} ] \" \"because things[ {} ] is already placed in that location.\" . format ( thing . id , self . id , check . id ) ) return False destroy ( self ) \u00b6 Source code in loudflow/realm/worlds/world.py @abstractmethod def destroy ( self ) -> None : pass find_by_name ( self , name ) \u00b6 Find things in worlds by name. Parameters: Name Type Description Default name str Name of things. required Returns: Type Description Optional[Thing] An instance of loudflow.realm.things.things.Thing . Source code in loudflow/realm/worlds/world.py @trace () def find_by_name ( self , name : str ) -> Optional [ Thing ]: \"\"\"Find things in worlds by name. Args: name: Name of things. Returns: An instance of `loudflow.realm.things.things.Thing`. \"\"\" for thing in self . things . values (): if thing . name == name : return thing return None locate ( self , x , y ) \u00b6 Locate things in worlds by specified coordinates. Parameters: Name Type Description Default x int X-coordinate for locating things. required y int Y-coordinate for locating things. required Returns: Type Description Optional[Thing] An instance of loudflow.realm.things.things.Thing . Source code in loudflow/realm/worlds/world.py @trace () def locate ( self , x : int , y : int ) -> Optional [ Thing ]: \"\"\"Locate things in worlds by specified coordinates. Args: x: X-coordinate for locating things. y: Y-coordinate for locating things. Returns: An instance of `loudflow.realm.things.things.Thing`. \"\"\" for thing in self . things . values (): if thing . x == x and thing . y == y : return thing return None move ( self , event ) \u00b6 Move things. Parameters: Name Type Description Default event ActionEvent Action events. required Source code in loudflow/realm/worlds/world.py @trace () def move ( self , event : ActionEvent ) -> None : \"\"\"Move things. Args: event: Action events. \"\"\" actor = self . things . get ( event . action . actor , None ) if actor is None : message = \"Cannot move things [ {} ] because it cannot be found in worlds [ {} ].\" . format ( event . action . actor , self . id ) logger . error ( message ) raise ValueError ( message ) self . _do_move ( actor , event . action . dx , event . action . dy , event . event_id ) on_next ( self , event ) \u00b6 Handles actions events. Parameters: Name Type Description Default event ActionEvent Action events. required Source code in loudflow/realm/worlds/world.py @trace () @timer () def on_next ( self , event : ActionEvent ) -> None : \"\"\"Handles actions events. Args: event: Action events. \"\"\" if event . action . __class__ . __name__ == \"Move\" : self . move ( event ) else : message = \"Invalid actions specified in actions events.\" logger . error ( message ) raise ValueError ( message ) remove ( self , thing_id ) \u00b6 Remove things from worlds. Parameters: Name Type Description Default thing_id str Thing identifier. required Source code in loudflow/realm/worlds/world.py @trace () def remove ( self , thing_id : str ) -> None : \"\"\"Remove things from worlds. Args: thing_id: Thing identifier. \"\"\" del self . things [ thing_id ] start ( self ) \u00b6 Source code in loudflow/realm/worlds/world.py @abstractmethod def start ( self ) -> None : pass stop ( self ) \u00b6 Source code in loudflow/realm/worlds/world.py @abstractmethod def stop ( self ) -> None : pass Class: WorldConfiguration \u00b6 World configuration class. Immutable dataclass containing worlds configuration data. height : Optional [ int ] dataclass-field \u00b6 name : str dataclass-field \u00b6 width : Optional [ int ] dataclass-field \u00b6 __delattr__ ( self , name ) special \u00b6 __eq__ ( self , other ) special \u00b6 __hash__ ( self ) special \u00b6 __init__ ( self , name , width , height ) special \u00b6 __post_init__ ( self ) special \u00b6 Source code in loudflow/realm/worlds/world.py def __post_init__ ( self ) -> None : if self . name is None : message = \"Missing required attribute [name: str] in WorldConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . name , str ): message = \"Invalid type for attribute [name: str] in WorldConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . width is None : object . __setattr__ ( self , \"width\" , 80 ) if not isinstance ( self . width , int ): message = \"Invalid type for attribute [width: int] in WorldConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . height is None : object . __setattr__ ( self , \"height\" , 50 ) if not isinstance ( self . height , int ): message = \"Invalid type for attribute [height: int] in WorldConfiguration.\" logger . error ( message ) raise ValueError ( message ) __repr__ ( self ) special \u00b6 __setattr__ ( self , name , value ) special \u00b6 build ( config ) staticmethod \u00b6 Build WorldConfiguration from dictionary of configuration data. Parameters: Name Type Description Default config Dict Dictionary containing configuration data. required Returns: Type Description WorldConfiguration An instance of loudflow.realm.worlds.worlds.WorldConfiguration . Source code in loudflow/realm/worlds/world.py @staticmethod @abstractmethod def build ( config : Dict ) -> WorldConfiguration : \"\"\"Build WorldConfiguration from dictionary of configuration data. Args: config: Dictionary containing configuration data. Returns: An instance of `loudflow.realm.worlds.worlds.WorldConfiguration`. \"\"\" pass copy ( self , ** attributes ) \u00b6 Copy WorldConfiguration state while replacing attributes with new values, and return new immutable instance. Parameters: Name Type Description Default **attributes Any New configuration attributes. {} Returns: Type Description WorldConfiguration An instance of loudflow.realm.worlds.worlds.WorldConfiguration . Source code in loudflow/realm/worlds/world.py @abstractmethod def copy ( self , ** attributes : Any ) -> WorldConfiguration : \"\"\"Copy WorldConfiguration state while replacing attributes with new values, and return new immutable instance. Args: **attributes: New configuration attributes. Returns: An instance of `loudflow.realm.worlds.worlds.WorldConfiguration`. \"\"\" pass","title":"world"},{"location":"loudflow/realm/worlds/world-reference/#module-world","text":"","title":"Module: world"},{"location":"loudflow/realm/worlds/world-reference/#class-world","text":"World class. The worlds in which the agent(s) act. Attributes: Name Type Description config World configuration data.","title":"Class: World"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.World.__init__","text":"Source code in loudflow/realm/worlds/world.py @trace () def __init__ ( self , config : WorldConfiguration ) -> None : logger . info ( \"Constructing worlds...\" ) super () . __init__ () self . id = str ( uuid4 ()) self . config = config self . name = config . name self . width = config . width self . height = config . height self . things : Dict [ str , Thing ] = {} self . events = Subject () self . actions = Subject () self . subscription = None","title":"__init__()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.World.add","text":"Add things to worlds. Parameters: Name Type Description Default thing Thing Thing. required replace bool If True, replace existing tile. If False, log warning. True silent bool If True, do not log warnings. True Returns: Type Description bool True if things is added, False if not. Source code in loudflow/realm/worlds/world.py @trace () def add ( self , thing : Thing , replace : bool = True , silent : bool = True ) -> bool : \"\"\"Add things to worlds. Args: thing: Thing. replace: If True, replace existing tile. If False, log warning. silent: If True, do not log warnings. Returns: True if things is added, False if not. \"\"\" if replace : self . things [ thing . id ] = thing return True else : check = self . things . get ( thing . id , None ) if check is None : self . things [ thing . id ] = thing return True else : if not silent : logger . warning ( \"Cannot place things [ {} ] in worlds [ {} ] \" \"because things[ {} ] is already placed in that location.\" . format ( thing . id , self . id , check . id ) ) return False","title":"add()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.World.destroy","text":"Source code in loudflow/realm/worlds/world.py @abstractmethod def destroy ( self ) -> None : pass","title":"destroy()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.World.find_by_name","text":"Find things in worlds by name. Parameters: Name Type Description Default name str Name of things. required Returns: Type Description Optional[Thing] An instance of loudflow.realm.things.things.Thing . Source code in loudflow/realm/worlds/world.py @trace () def find_by_name ( self , name : str ) -> Optional [ Thing ]: \"\"\"Find things in worlds by name. Args: name: Name of things. Returns: An instance of `loudflow.realm.things.things.Thing`. \"\"\" for thing in self . things . values (): if thing . name == name : return thing return None","title":"find_by_name()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.World.locate","text":"Locate things in worlds by specified coordinates. Parameters: Name Type Description Default x int X-coordinate for locating things. required y int Y-coordinate for locating things. required Returns: Type Description Optional[Thing] An instance of loudflow.realm.things.things.Thing . Source code in loudflow/realm/worlds/world.py @trace () def locate ( self , x : int , y : int ) -> Optional [ Thing ]: \"\"\"Locate things in worlds by specified coordinates. Args: x: X-coordinate for locating things. y: Y-coordinate for locating things. Returns: An instance of `loudflow.realm.things.things.Thing`. \"\"\" for thing in self . things . values (): if thing . x == x and thing . y == y : return thing return None","title":"locate()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.World.move","text":"Move things. Parameters: Name Type Description Default event ActionEvent Action events. required Source code in loudflow/realm/worlds/world.py @trace () def move ( self , event : ActionEvent ) -> None : \"\"\"Move things. Args: event: Action events. \"\"\" actor = self . things . get ( event . action . actor , None ) if actor is None : message = \"Cannot move things [ {} ] because it cannot be found in worlds [ {} ].\" . format ( event . action . actor , self . id ) logger . error ( message ) raise ValueError ( message ) self . _do_move ( actor , event . action . dx , event . action . dy , event . event_id )","title":"move()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.World.on_next","text":"Handles actions events. Parameters: Name Type Description Default event ActionEvent Action events. required Source code in loudflow/realm/worlds/world.py @trace () @timer () def on_next ( self , event : ActionEvent ) -> None : \"\"\"Handles actions events. Args: event: Action events. \"\"\" if event . action . __class__ . __name__ == \"Move\" : self . move ( event ) else : message = \"Invalid actions specified in actions events.\" logger . error ( message ) raise ValueError ( message )","title":"on_next()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.World.remove","text":"Remove things from worlds. Parameters: Name Type Description Default thing_id str Thing identifier. required Source code in loudflow/realm/worlds/world.py @trace () def remove ( self , thing_id : str ) -> None : \"\"\"Remove things from worlds. Args: thing_id: Thing identifier. \"\"\" del self . things [ thing_id ]","title":"remove()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.World.start","text":"Source code in loudflow/realm/worlds/world.py @abstractmethod def start ( self ) -> None : pass","title":"start()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.World.stop","text":"Source code in loudflow/realm/worlds/world.py @abstractmethod def stop ( self ) -> None : pass","title":"stop()"},{"location":"loudflow/realm/worlds/world-reference/#class-worldconfiguration","text":"World configuration class. Immutable dataclass containing worlds configuration data.","title":"Class: WorldConfiguration"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.height","text":"","title":"height"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.name","text":"","title":"name"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.width","text":"","title":"width"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.__delattr__","text":"","title":"__delattr__()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.__eq__","text":"","title":"__eq__()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.__hash__","text":"","title":"__hash__()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.__init__","text":"","title":"__init__()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.__post_init__","text":"Source code in loudflow/realm/worlds/world.py def __post_init__ ( self ) -> None : if self . name is None : message = \"Missing required attribute [name: str] in WorldConfiguration.\" logger . error ( message ) raise ValueError ( message ) if not isinstance ( self . name , str ): message = \"Invalid type for attribute [name: str] in WorldConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . width is None : object . __setattr__ ( self , \"width\" , 80 ) if not isinstance ( self . width , int ): message = \"Invalid type for attribute [width: int] in WorldConfiguration.\" logger . error ( message ) raise ValueError ( message ) if self . height is None : object . __setattr__ ( self , \"height\" , 50 ) if not isinstance ( self . height , int ): message = \"Invalid type for attribute [height: int] in WorldConfiguration.\" logger . error ( message ) raise ValueError ( message )","title":"__post_init__()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.__repr__","text":"","title":"__repr__()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.__setattr__","text":"","title":"__setattr__()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.build","text":"Build WorldConfiguration from dictionary of configuration data. Parameters: Name Type Description Default config Dict Dictionary containing configuration data. required Returns: Type Description WorldConfiguration An instance of loudflow.realm.worlds.worlds.WorldConfiguration . Source code in loudflow/realm/worlds/world.py @staticmethod @abstractmethod def build ( config : Dict ) -> WorldConfiguration : \"\"\"Build WorldConfiguration from dictionary of configuration data. Args: config: Dictionary containing configuration data. Returns: An instance of `loudflow.realm.worlds.worlds.WorldConfiguration`. \"\"\" pass","title":"build()"},{"location":"loudflow/realm/worlds/world-reference/#loudflow.realm.worlds.world.WorldConfiguration.copy","text":"Copy WorldConfiguration state while replacing attributes with new values, and return new immutable instance. Parameters: Name Type Description Default **attributes Any New configuration attributes. {} Returns: Type Description WorldConfiguration An instance of loudflow.realm.worlds.worlds.WorldConfiguration . Source code in loudflow/realm/worlds/world.py @abstractmethod def copy ( self , ** attributes : Any ) -> WorldConfiguration : \"\"\"Copy WorldConfiguration state while replacing attributes with new values, and return new immutable instance. Args: **attributes: New configuration attributes. Returns: An instance of `loudflow.realm.worlds.worlds.WorldConfiguration`. \"\"\" pass","title":"copy()"}]}